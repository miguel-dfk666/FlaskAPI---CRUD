[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "models.tasks",
        "description": "models.tasks",
        "isExtraImport": true,
        "detail": "models.tasks",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "models.tasks",
        "description": "models.tasks",
        "peekOfCode": "class Task:\n    def __init__(self, id, title, description, completed=False) -> None:\n        self.id = id\n        self.title = title\n        self.description = description\n        self.completed = completed\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'title': self.title,",
        "detail": "models.tasks",
        "documentation": {}
    },
    {
        "label": "create_task",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def create_task():\n    global task_id_control\n    data = request.get_json()\n    new_task = Task(id=task_id_control, title=data['title'], description=data.get(\"descrtiption\", \"\"))\n    task_id_control += 1\n    tasks.append(new_task)\n    print(tasks)\n    return jsonify({\"message\": \"Nova tarefa criada com sucesso!\"})\n@app.route('/tasks', methods=['GET'])\ndef get_tasks():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_tasks",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_tasks():\n    task_list = [ task.to_dict() for task in tasks ]\n    output = {\n                \"tasks\": task_list,\n                \"total_tasks\": len(task_list)\n            }\n    return jsonify(output)\n@app.route('/tasks/<int:id>', methods=['GET'])\ndef get_task_id(id):\n    task = None",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "get_task_id",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def get_task_id(id):\n    task = None\n    for t in tasks:\n        if t.id == id:\n            return jsonify(t.to_dict())\n    return jsonify({\"message\": \"Não foi poissível encontrar atividade\"}), 404\n@app.route('/tasks/<int:id>', methods=['PUT'])\ndef update_task(id):\n    task = None\n    for t in tasks:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "update_task",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def update_task(id):\n    task = None\n    for t in tasks:\n        if t.id == id:\n            task = t\n            break\n    if not task:\n        return jsonify({\"message\": \"Não foi possível encontrar a atividade\"}), 404\n    data = request.get_json()\n    task.title = data['title']",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "delete_task",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def delete_task(id):\n    task = None\n    for t in tasks:\n        if t.id == id:\n            task = t\n            break\n    if not task:\n        return jsonify({\"message\": \"Não foi possível encontrar a atividade\"}), 404\n    tasks.remove(task)\n    return jsonify({\"message\": \"tarefa deletada com sucesso\"})",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n# CRUD Create, Read, Update, Delete\n# Tabela: Tarefa \ntasks = []\ntask_id_control = 1\n@app.route('/tasks', methods=['POST'])\ndef create_task():\n    global task_id_control\n    data = request.get_json()\n    new_task = Task(id=task_id_control, title=data['title'], description=data.get(\"descrtiption\", \"\"))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "tasks = []\ntask_id_control = 1\n@app.route('/tasks', methods=['POST'])\ndef create_task():\n    global task_id_control\n    data = request.get_json()\n    new_task = Task(id=task_id_control, title=data['title'], description=data.get(\"descrtiption\", \"\"))\n    task_id_control += 1\n    tasks.append(new_task)\n    print(tasks)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "task_id_control",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "task_id_control = 1\n@app.route('/tasks', methods=['POST'])\ndef create_task():\n    global task_id_control\n    data = request.get_json()\n    new_task = Task(id=task_id_control, title=data['title'], description=data.get(\"descrtiption\", \"\"))\n    task_id_control += 1\n    tasks.append(new_task)\n    print(tasks)\n    return jsonify({\"message\": \"Nova tarefa criada com sucesso!\"})",
        "detail": "app",
        "documentation": {}
    }
]